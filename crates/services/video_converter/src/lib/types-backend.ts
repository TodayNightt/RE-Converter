/*
 Generated by typeshare 1.13.0
*/

export type ArgsType<T> =
	| { type: "matchSource", content?: undefined }
	| { type: "custom", content: T };

export enum Resolution {
	R720P = "r720P",
	R1080P = "r1080P",
	R1440P = "r1440P",
	R4K = "r4K",
}

export enum HwAccel {
	Cuda = "cuda",
	Directx = "directx	",
	Vaapi = "vaapi",
	Vulkan = "vulkan",
}

export enum AudioCodec {
	Flac = "flac",
	Aac = "aac",
	Ipcm = "ipcm",
}

export enum VideoCodec {
	H264 = "h264",
	H264NVENC = "h264NVENC",
	H264AMF = "h264AMF",
	H264QSV = "h264QSV",
	H265 = "h265",
	H265NVENC = "h265NVENC",
	H265AMF = "h265AMF",
	H265QSV = "h265QSV",
	CineForm = "cineForm",
	Prores = "prores",
}

export enum PictureFormat {
	Pf42210B = "pf42210B",
	Pf4228B = "pf4228B",
	Pf42010B = "pf42010B",
	Pf4208B = "pf4208B",
}

export enum OutputExtension {
	Default = "default",
	Mkv = "mkv",
	Mov = "mov",
	Mp4 = "mp4",
	Mp3 = "mp3",
}

export interface FfmpegOptions {
	resolution: ArgsType<Resolution>;
	hwaccel?: HwAccel;
	audioCodec: ArgsType<AudioCodec>;
	videoCodec: ArgsType<VideoCodec>;
	audioBitrate: ArgsType<number>;
	videoBitrate: ArgsType<number>;
	pictureFormat: ArgsType<PictureFormat>;
	outputExtension: OutputExtension;
}

export interface Config {
	last_saved?: ConverterOptions;
}

export interface ConverterOptions {
	inputDir: string;
	outputDir: string;
	needSorting: boolean;
	ffmpegOptions: FfmpegOptions;
}

export interface ProgressInfo {
	folderName: string;
	status: string;
	fileName: string;
	currentProgress: number;
	totalProgress: number;
}

export type Message =
	| { method: "hello", data?: undefined }
	| { method: "convert", data: ConverterOptions }
	| { method: "acknowledge", data?: undefined }
	| { method: "cancelAcknowledge", data?: undefined }
	| { method: "progress", data: ProgressInfo[] }
	| { method: "cancel", data?: undefined }
	| { method: "error", data: string }
	| { method: "finished", data?: undefined };

